
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="gentoo"

plugins=(
    git
    archlinux
    zsh-autosuggestions
    zsh-syntax-highlighting
    colored-man-pages
    command-not-found
    extract
    web-search
    copypath
    copyfile
    dirhistory
    sudo
)

source $ZSH/oh-my-zsh.sh

# Check archlinux plugin commands here
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/archlinux

# Display Pokemon-colorscripts
# Project page: https://gitlab.com/phoneybadger/pokemon-colorscripts#on-other-distros-and-macos
#pokemon-colorscripts --no-title -s -r #without fastfetch
pokemon-colorscripts --no-title -s -r | fastfetch -c $HOME/.config/fastfetch/config-pokemon.jsonc --logo-type file-raw --logo-height 10 --logo-width 5 --logo -

# fastfetch. Will be disabled if above colorscript was chosen to install
#fastfetch -c $HOME/.config/fastfetch/config-compact.jsonc

# Enhanced History Configuration
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt appendhistory
setopt sharehistory
setopt incappendhistory
setopt histignoredups
setopt histignorespace
setopt histverify
setopt extendedhistory

# Better completion system
autoload -Uz compinit
compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# Set-up icons for files/directories in terminal using lsd
alias ls='lsd'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'
alias llt='ls -la --tree'

# Enhanced file operations
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -iv'
alias mkdir='mkdir -pv'

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ~='cd ~'
alias -- -='cd -'

# System information
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps auxf'
alias psg='ps aux | grep -v grep | grep -i -e VSZ -e'
alias myip='curl -s ifconfig.me'
alias ports='netstat -tulanp'

# Package management (Arch Linux)
alias pacup='sudo pacman -Syu'
alias pacin='sudo pacman -S'
alias pacre='sudo pacman -R'
alias pacse='pacman -Ss'
alias pacinfo='pacman -Si'
alias yayup='yay -Syu'
alias yayin='yay -S'

# Git aliases (enhanced)
alias ga='git add .'
alias gaa='git add --all'
alias gc='git commit'
alias gcm='git commit -m'
alias gca='git commit --amend'
alias gp='git push'
alias gpl='git pull'
alias gs='git status'
alias gd='git diff'
alias gl='git log --oneline --graph --decorate'
alias gb='git branch'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gm='git merge'
alias gr='git reset'
alias gst='git stash'
alias gstp='git stash pop'

# Development aliases
alias nv='nvim'
alias vim='nvim'
alias vi='nvim'
alias code='code .'
alias py='python3'
alias pip='pip3'
alias serve='python3 -m http.server'
alias json='python3 -m json.tool'

# Docker aliases
alias Docker='sudo systemctl start docker'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias drm='docker rm'
alias drmi='docker rmi'
alias dstop='docker stop $(docker ps -q)'
alias dclean='docker system prune -af'

# System control
alias sctl='sudo systemctl'
alias jctl='journalctl'
alias uctl='systemctl --user'

# Network
alias ping='ping -c 5'
alias wget='wget -c'
alias speedtest='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -'

# Custom aliases 
alias obs_bak="~/Documents/scripts/obs_backup.sh"
alias ff="fastfetch --logo Windows"
alias cl='clear'
alias c='clear'
alias h='history'
alias j='jobs -l'
alias path='echo -e ${PATH//:/\\n}'
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'

# Quick edit configs
alias zshrc='nvim ~/.zshrc'
alias tmuxrc='nvim ~/.tmux.conf'
alias nvimrc='nvim ~/.config/nvim/init.lua'

# Enhanced functions
# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract any archive
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find files and directories
ff() {
    find . -type f -name "*$1*" 2>/dev/null
}

fd() {
    find . -type d -name "*$1*" 2>/dev/null
}

# Quick backup
backup() {
    cp "$1"{,.bak}
}

# Weather function
weather() {
    curl -s "wttr.in/$1?format=3"
}

# Process management
killport() {
    lsof -ti:$1 | xargs kill -9
}

# Git functions
gclone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Quick note taking
note() {
    echo "$(date): $*" >> "$HOME/notes.txt"
}

notes() {
    cat "$HOME/notes.txt"
}

# System update function
sysup() {
    echo "Updating system packages..."
    sudo pacman -Syu
    echo "Updating AUR packages..."
    yay -Syu
    echo "Cleaning package cache..."
    sudo pacman -Sc --noconfirm
    echo "System update complete!"
}

# Set-up FZF key bindings (CTRL R for fuzzy history finder)
source <(fzf --zsh)

# Enhanced FZF configuration
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border --inline-info"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --follow --exclude .git'

# FZF functions
fzf_git_log() {
    git log --oneline --color=always | fzf --ansi --preview 'git show --color=always {1}'
}

fzf_kill() {
    ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
}

# Start ssh-agent and add key if not already running
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
fi
if [[ "$SSH_AGENT_PID" == "" ]]; then
    eval "$(<~/.ssh-agent-thing)"
fi
ssh-add ~/.ssh/github_private 2>/dev/null

# Environment variables
export EDITOR='nvim'
export VISUAL='nvim'
export BROWSER='firefox'
export TERMINAL='alacritty'

# Development paths
export QSYS_ROOTDIR="/home/wofo/intelFPGA_lite/24.1std/quartus/sopc_builder/bin"
export PATH="$PATH:/home/wofo/intelFPGA_lite/24.1std/quartus/bin"
export PATH="$HOME/.pyenv/bin:$PATH"
export PATH="$PATH:$HOME/go/bin"
export PATH="$HOME/.local/bin:$PATH"

# Python environment
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Zoxide (better cd)
eval "$(zoxide init --cmd cd zsh)"

# Auto-suggestions configuration
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666,underline"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# Syntax highlighting configuration
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)

# Key bindings
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word

# Load local customizations if they exist
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# Welcome message
echo "üöÄ Welcome back! Type 'help-zsh' for a quick reference of custom commands."

# Help function
help-zsh() {
    echo "üìö Custom ZSH Commands & Aliases:"
    echo ""
    echo "üóÇÔ∏è  File Operations:"
    echo "  ls, l, la, lla, lt     - Enhanced ls with lsd"
    echo "  mkcd <dir>             - Create directory and cd into it"
    echo "  backup <file>          - Create .bak copy of file"
    echo "  extract <archive>      - Extract any archive format"
    echo ""
    echo "üîç Search & Navigation:"
    echo "  ff <name>              - Find files by name"
    echo "  fd <name>              - Find directories by name"
    echo "  fzf_git_log            - Interactive git log browser"
    echo "  fzf_kill               - Interactive process killer"
    echo ""
    echo "üîß System:"
    echo "  sysup                  - Update system and AUR packages"
    echo "  killport <port>        - Kill process on specific port"
    echo "  weather <city>         - Get weather info"
    echo ""
    echo "üìù Notes:"
    echo "  note <text>            - Add quick note"
    echo "  notes                  - View all notes"
    echo ""
    echo "‚ö° Git shortcuts: ga, gc, gp, gs, gd, gl, gb, gco, gcb"
    echo "üê≥ Docker shortcuts: dps, di, dstop, dclean"
    echo "üì¶ Package shortcuts: pacup, pacin, yayup, yayin"
}
